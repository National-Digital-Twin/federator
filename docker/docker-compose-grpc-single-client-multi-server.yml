# SPDX-License-Identifier: Apache-2.0
# Â© Crown Copyright 2025. This work has been developed by the National Digital Twin Programme
# and is legally attributed to the Department for Business and Trade (UK) as the governing entity.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
  - docker-grpc-resources/docker-compose-shared.yml

name: single-client-multiple-servers
services:
  federator-server:
    image: uk.gov.dbt.ndtp/${ARTIFACT_ID}-server:${VERSION}
    container_name: federator-server
    environment:
      FEDERATOR_SERVER_PROPERTIES: /config/server.properties
    networks:
      - core
    depends_on:
      kafka-src:
        condition: service_healthy
    volumes:
      - ./docker-grpc-resources/single-client-multiple-servers/access1.json:/config/access.json
      - ./docker-grpc-resources/single-client-multiple-servers/server.properties:/config/server.properties
      - ./filter:/library
    restart: on-failure

  federator-server-2:
    image: uk.gov.dbt.ndtp/${ARTIFACT_ID}-server:${VERSION}
    container_name: federator-server-2
    environment:
      FEDERATOR_SERVER_PROPERTIES: /config/server.properties
    networks:
      - core
    depends_on:
      kafka-src:
        condition: service_healthy
    volumes:
      - ./docker-grpc-resources/single-client-multiple-servers/access2.json:/config/access.json
      - ./docker-grpc-resources/single-client-multiple-servers/server.properties:/config/server.properties
      - ./filter:/library
    restart: on-failure

  federator-client:
    image: uk.gov.dbt.ndtp/${ARTIFACT_ID}-client:${VERSION}
    container_name: federator-client
    build:
      context: ../
      dockerfile: docker/Dockerfile.client
      args:
        JAR_NAME: ${ARTIFACT_ID}-client-${VERSION}
    environment:
      FEDERATOR_CLIENT_PROPERTIES: /config/client.properties
    networks:
      - core
    volumes:
      - ./docker-grpc-resources/single-client-multiple-servers/client.properties:/config/client.properties
      - ./docker-grpc-resources/single-client-multiple-servers/connection-configuration.json:/config/connection-configuration.json
    depends_on:
      redis:
        condition: service_healthy
      kafka-target:
        condition: service_healthy
      kafka-topics-populator:
        condition: service_completed_successfully
      federator-server:
        condition: service_started
      federator-server-2:
        condition: service_started
    restart: on-failure

  kafka-message-counter:
    build:
      context: kafka-message-counter
      dockerfile: Dockerfile
    container_name: kafka-message-counter
    depends_on:
      kafka-bulk-test-data-loader:
        condition: service_completed_successfully
      federator-client:
        condition: service_started
    environment:
      KAFKA_BROKER_SERVER: "kafka-target:19092"
      TOPICS_TO_CHECK: "federated-FederatorServer1-knowledge federated-FederatorServer2-knowledge2 federated-FederatorServer1-bulkDataLoaderTopic1"
      EXPECTED_MESSAGE_COUNTS: "23 4 1350"
      DELAY_BEFORE_CONSUMING_DATA: "5"
    networks:
      - core
    volumes:
      - ../input:/usr/bin/input