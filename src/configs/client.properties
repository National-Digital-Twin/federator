# SPDX-License-Identifier: Apache-2.0
# Originally developed by Telicent Ltd.; subsequently adapted, enhanced, and maintained by the National Digital Twin Programme.

# Copyright (c) Telicent Ltd.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Modifications made by the National Digital Twin Programme (NDTP)
# Crown Copyright 2025. This work has been developed by the National Digital Twin Programme
# and is legally attributed to the Department for Business and Trade (UK) as the governing entity.

kafka.sender.defaultKeySerializerClass=org.apache.kafka.common.serialization.BytesSerializer
kafka.sender.defaultValueSerializerClass=org.apache.kafka.common.serialization.BytesSerializer
kafka.bootstrapServers=localhost:29093

###
### The following are the controls used when read from topics used by the client and the server
###
## Default retries.max_attempts is 200
#retries.max_attempts=
## Default retries.initial_backoff is 500 (ms)
#retries.initial_backoff=
## Default retries.max_backoff is 60000 (ms)
#retries.max_backoff=
## Default retries.forever is true (retry forever)
## Back off time doubles every iteration up to the max_backoff time. After max attempts it exits
## if the reties.forever is set to false.
#retries.forever=

## kafka.topic.prefix default is empty string
kafka.topic.prefix=federated
kafka.consumerGroup=ndtp.dbt.gov.uk

## Default redis.host is localhost
redis.host=localhost
## Default redis.port is 6379
redis.port=6380
## Default redis.tls.enabled empty value "" = false, missing property entry = true
redis.tls.enabled=false
# If redis authentication is enabled then set the username and password here. If only a password is required then keep the username as an empty string.
redis.username=
redis.password=

## If client.tlsEnabled is set to true then you need to set the file path for CA cert and P12 file
client.p12Password=
client.p12FilePath=
client.truststoreFilePath=
client.truststorePassword=
connections.configuration=src/configs/connection-configuration.json
common.configuration=src/configs/common-configuration.properties


# Consumer ID for federator
federator.consumer.id=${FEDERATOR_CONSUMER_ID}

# ============================================
# Management Node Configuration
# ============================================

# Base URL for the management node
management.node.base.url=${MANAGEMENT_NODE_BASE_URL}

# Request timeout in seconds for management node connections
management.node.request.timeout=${MANAGEMENT_NODE_REQUEST_TIMEOUT}

# ============================================
# Cache Configuration
# ============================================

# Cache time-to-live in seconds
management.node.cache.ttl.seconds=${MANAGEMENT_NODE_CACHE_TTL_SECONDS}


# ============================================
# Management Node API Endpoints
# ============================================

# Consumer configuration endpoint
management.node.api.endpoints.consumer=${MANAGEMENT_NODE_API_CONSUMER_ENDPOINT}

org.jobrunr.jobs.default-allow-concurrent-execution=false
jobs.dashboard.port=8085
jobs.dashboard.enabled=true