// SPDX-License-Identifier: Apache-2.0
// Originally developed by Telicent Ltd.; subsequently adapted, enhanced, and maintained by the National Digital Twin Programme.

/*
 *  Copyright (c) Telicent Ltd.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 *  Modifications made by the National Digital Twin Programme (NDTP)
 *  Â© Crown Copyright 2025. This work has been developed by the National Digital Twin Programme
 *  and is legally attributed to the Department for Business and Trade (UK) as the governing entity.
 */
syntax = "proto3";
option java_multiple_files = true;
package uk.gov.dbt.ndtp.grpc;

message Headers {
  string Key = 1;
  string Value = 2;
}

message KafkaByteBatch {
  bytes Value = 1;
  int64 Offset = 2;
  bytes Key = 3;
  string Topic = 4;
  //field 5 *was* SecurityLabel string SecurityLabel = 5, now removed
  repeated Headers Shared = 6;
}

message TopicRequest {
  string Topic = 1;
  int64 Offset = 2;
}

message FileStreamRequest {
  string Topic = 1;
  int64 start_sequence_id = 2;  // 0 = start from beginning, >0 = resume from sequence
}

message FileChunk {
  string file_name = 1;
  bytes chunk_data = 2;
  int32 chunk_index = 3;
  int32 total_chunks = 4;
  string chunk_checksum = 5;
  bool is_last_chunk = 6;
  string file_checksum = 7;
  int64 file_size = 8;
  int64 file_sequence_id = 9;
}

service FederatorService {
  rpc GetKafkaConsumer(TopicRequest) returns (stream KafkaByteBatch) {};
  rpc GetFilesStream(FileStreamRequest) returns (stream FileChunk) {};
}
